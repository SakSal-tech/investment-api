### Sample HTTP requests for Investment Spring Boot API
### A .http file is a plain text file where you can write and save HTTP requests (GET, POST, PUT, DELETE, etc.). With the REST Client extension in VS Code, you can:
### It's a convenient way to test and document your API endpoints without leaving VS Code or using external tools like Postman.
## This is to reduce my mistakes


# Get all clients
GET http://localhost:8080/api/clients
Accept: application/json

###
# Get a client by ID
GET http://localhost:8080/api/clients/{{clientId}}
Accept: application/json

###
# Create a new client
POST http://localhost:8080/api/clients
Content-Type: application/json

{
  "firstName": "John",
  "surname": "Doe",
  "dob": "1990-01-01",
  "email": "john.doe@example.com",
  "postCode": "AB12 3CD"
}

###
# Update a client
PUT http://localhost:8080/api/clients/{{clientId}}
Content-Type: application/json

{
  "firstName": "Jane",
  "surname": "Smith",
  "dob": "1991-02-02",
  "email": "jane.smith@example.com",
  "postCode": "XY99 9ZZ"
}

###
# Delete a client
DELETE http://localhost:8080/api/clients/{{clientId}}

###
# Get all users
GET http://localhost:8080/api/users
Accept: application/json

###
# Get user by ID
GET http://localhost:8080/api/users/{{userId}}
Accept: application/json

###
# Create a new user
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json

{
  "username": "newuser",
  "passwordHash": "password123",
  "email": "newuser@example.com",
  "isActive": true,
  "client": {
    "clientId": "{{clientId}}"
  }
}

###
# Update user by ID
PUT http://localhost:8080/api/users/{{userId}}
Content-Type: application/json
Accept: application/json

{
  "userId": "{{userId}}",
  "username": "updateduser",
  "passwordHash": "newpassword",
  "email": "updateduser@example.com",
  "isActive": true,
  "client": {
    "clientId": "{{clientId}}"
  }
}

###
# Delete user by ID
DELETE http://localhost:8080/api/users/{{userId}}
Accept: application/json


# Portfolio Endpoints
### Get all portfolios
GET http://localhost:8080/api/portfolios

### Get portfolio by ID
GET http://localhost:8080/api/portfolios/{{portfolioId}}

### Create a new portfolio
POST http://localhost:8080/api/portfolios
Content-Type: application/json

{
  "name": "Sample Portfolio",
  "description": "A test portfolio"
}

### Update a portfolio
PUT http://localhost:8080/api/portfolios/{{portfolioId}}
Content-Type: application/json

{
  "name": "Updated Portfolio",
  "description": "Updated description"
}

### Delete a portfolio
DELETE http://localhost:8080/api/portfolios/{{portfolioId}}

# Sustainable Portfolio Endpoints
### Get all sustainable portfolios
GET http://localhost:8080/api/sustainable-portfolios

### Get sustainable portfolio by ID
GET http://localhost:8080/api/sustainable-portfolios/{{id}}

### Create a new sustainable portfolio
POST http://localhost:8080/api/sustainable-portfolios
Content-Type: application/json

{
  "name": "Green Portfolio",
  "complianceStatus": "Compliant",
  "themeFocus": ["Renewable Energy"],
  "excludedSectors": ["Tobacco"],
  "overallEsgScore": 85
}

### Update a sustainable portfolio
PUT http://localhost:8080/api/sustainable-portfolios/{{id}}
Content-Type: application/json

{
  "name": "Updated Green Portfolio",
  "complianceStatus": "Non-Compliant",
  "themeFocus": ["Water Conservation"],
  "excludedSectors": ["Coal"],
  "overallEsgScore": 70
}

### Delete a sustainable portfolio
DELETE http://localhost:8080/api/sustainable-portfolios/{{id}}

### Find by compliance status
GET http://localhost:8080/api/sustainable-portfolios/compliance/{{status}}

### Find by theme focus
GET http://localhost:8080/api/sustainable-portfolios/theme/{{theme}}

### Find by excluded sector
GET http://localhost:8080/api/sustainable-portfolios/excluded-sector/{{sector}}

### Find by ESG score (greater than or equal)
GET http://localhost:8080/api/sustainable-portfolios/esg-score/{{score}}

# Risk Endpoints
### Get all risks
GET http://localhost:8080/api/risks

### Get risk by ID
GET http://localhost:8080/api/risks/{{id}}

### Create a new risk
POST http://localhost:8080/api/risks
Content-Type: application/json

{
  "type": "VaR",
  "assetId": "asset123",
  "calculationDate": "2024-01-01",
  "value": 10000.0,
  "confidenceLevel": 0.95,
  "scenario": "Market Crash",
  "currency": "USD"
}

### Update a risk
PUT http://localhost:8080/api/risks/{{id}}
Content-Type: application/json

{
  "type": "VaR",
  "assetId": "asset123",
  "calculationDate": "2024-01-01",
  "value": 12000.0,
  "confidenceLevel": 0.99,
  "scenario": "Interest Rate Shock",
  "currency": "EUR"
}

### Delete a risk
DELETE http://localhost:8080/api/risks/{{id}}

### Find risks by type
GET http://localhost:8080/api/risks/type/{{type}}

### Find risks by asset ID
GET http://localhost:8080/api/risks/asset/{{assetId}}

### Find risks by calculation date
GET http://localhost:8080/api/risks/date/{{date}}

### Find risks by value (greater than or equal)
GET http://localhost:8080/api/risks/value/{{value}}

### Find risks by confidence level
GET http://localhost:8080/api/risks/confidence/{{confidenceLevel}}

### Find risks by scenario
GET http://localhost:8080/api/risks/scenario/{{scenario}}

### Find risks by currency
GET http://localhost:8080/api/risks/currency/{{currency}}

### Calculate VaR (Value at Risk)
POST http://localhost:8080/api/risks/var?assetId={{assetId}}&confidenceLevel={{confidenceLevel}}&timeHorizonDays={{days}}
Accept: application/json

### Calculate a stress test
POST http://localhost:8080/api/risks/stress-test?assetId={{assetId}}&scenario={{scenario}}
Accept: application/json

